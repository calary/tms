// require('./task-list.component.css');

controller.$inject = ['$modalService', 'utils', 'brandService'];
function controller($modalService, utils, brandService){
  var $ctrl = this;
  $ctrl.data = [];
  $ctrl.update = null; // 等xx-table初始化后填充
  $ctrl.create = create;

  // formly配置 
  $ctrl.model = {};
  $ctrl.options = {};
  $ctrl.fields = [
    {
      key: 'name',
      type: 'input2',
      templateOptions: {
        label: '品牌名称',
        required: true
      },
      validators: {
        testLength: {
          expression: function(viewValue, modelValue) {
            var value = modelValue || viewValue;
            var len = utils.strlen(value);
            return len >= 4 && len <= 20;
          },
          message: '"请输入4-20个字符（中文算2个字符）"'
        }
      }
    }
  ];

  // xx-table配置
  $ctrl.tableConfig = {
    data: [],
    firstUpdate: true,
    getData: getData,
    columns: [
      {
        head: 'ID',
        data: '{{ row.Primaryid }}'
      }, {
        head: '品牌/平台名称',
        data: '{{ row.name }}'
      }, {
        head: '创建时间',
        data: '{{ row.createtime | date2 }}'
      }, {
        head: '最后操作时间',
        data: '{{ row.updatetime | date2 }}'
      }, {
        head: '启用/停用',
        data: '<switch ng-model="row.isuse" class="green"></switch><div class="cover" xx-click="methods.toggle(row)">遮挡</div>'
      }
    ],
    methods: {
      toggle: toggle
      // getStatusTitle: getStatusTitle,
      // getPercent: getPercent
    }
  };
  $ctrl.onTableInit = onTableInit;

  function getData(){
    return brandService.getBrands();
  }
  function onTableInit(update){
    console.log('on table init');
    $ctrl.update = update;
  }
  function create(){
    if($ctrl.form.$invalid) {
      return;
    }
    brandService.editBrand({
      name: $ctrl.model.name
    }).then(function(data){
      console.log(data);
      $ctrl.options.resetModel();
      $modalService.alert({
        content: '创建成功', 
        hideCancel: true
      }).then($ctrl.update);
    }, function(reason){
      console.log(reason);
    });
  }
  function edit(){

  }
  function toggle(brand){
    if(!brand || !brand.Primaryid) {
      return;
    }
    brandService.editBrand({
      method: 1,
      Primaryid: brand.Primaryid,
      isuse: brand.isuse ? 0 : 1
    })
  }
}

module.exports = {
  template: require('./brand-list.component.html'),
  controller: controller
};